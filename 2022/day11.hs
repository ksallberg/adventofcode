module Day11 where

-- code here is generated by chat gpt

data Monkey = Monkey
  { startingItems :: [Int]
  , operation :: Int -> Int
  , test :: Int -> Bool
  , throwTo :: Int
  }

-- Create a monkey with the given starting items,
-- operation, test, and throwTo value
mkMonkey :: [Int] -> (Int -> Int) -> (Int -> Bool) -> Int -> Monkey
mkMonkey items op test throw = Monkey items op test throw

-- Define the operation and test functions for each monkey
op0 = (* 5)
op1 = (+ 1)
op2 = (+ 8)
op3 = (+ 4)
op4 = (+ 7)
op5 = (+ 2)
op6 = (* 11)
op7 = (^ 2)

test0 = (== 0) . (`mod` 7)
test1 = (== 0) . (`mod` 17)
test2 = (== 0) . (`mod` 11)
test3 = (== 0) . (`mod` 13)
test4 = (== 0) . (`mod` 19)
test5 = (== 0) . (`mod` 2)
test6 = (== 0) . (`mod` 5)
test7 = (== 0) . (`mod` 3)

-- Create a list of monkeys using the mkMonkey function
monkeys =
  [ mkMonkey [89, 84, 88, 78, 70] op0 test0 6
  , mkMonkey [76, 62, 61, 54, 69, 60, 85] op1 test1 0
  , mkMonkey [83, 89, 53] op2 test2 5
  , mkMonkey [95, 94, 85, 57] op3 test3 0
  , mkMonkey [82, 98] op4 test4 5
  , mkMonkey [69] op5 test5 3
  , mkMonkey [82, 70, 58, 87, 59, 99, 92, 65] op6 test6 4
  , mkMonkey [91, 53, 96, 98, 68, 82] op7 test7 2
  ]

main :: IO ()
main = mapM_ putStrLn (map show monkeys)
